import React, { useState, useEffect, useMemo } from 'react';
import { 
  Search, Filter, Eye, Settings, Plus, Trash2, Calendar, 
  Clock, AlertTriangle, CheckCircle, Users, FileText,
  GraduationCap, Brain, Heart, Mic, BarChart3, Hand,
  UserCheck, Headphones, Activity, Target, BookOpen,
  Shield, Zap, Globe, Smartphone, Menu, X
} from 'lucide-react';

const ConnectEd360 = () => {
  // Core state management
  const [students, setStudents] = useState([
    {
      id: 1,
      firstName: 'Maria',
      lastName: 'Rodriguez',
      studentId: 'STU001',
      grade: '3rd',
      campus: 'Oak Elementary',
      consentDate: '2025-04-15',
      ardDate: '2025-06-10',
      status: 'In Progress',
      primaryLanguage: 'Spanish',
      isLEP: true,
      gender: 'Female',
      parentName: 'Carmen Rodriguez',
      parentEmail: 'carmen.rodriguez@email.com',
      parentPhone: '(210) 555-0123',
      fieType: 'Initial',
      eligibilityPrimary: 'SLD',
      eligibilitySecondary: '',
      services: {
        counseling: true,
        bip: false,
        at: false
      },
      assessments: {
        cognitive: { completed: true, assignee: 'Dr. Smith', date: '2025-05-01' },
        academic: { completed: true, assignee: 'Dr. Smith', date: '2025-05-03' },
        emotional: { completed: false, assignee: 'Dr. Johnson', date: null },
        speechLanguage: { completed: false, assignee: 'Ms. Garcia', date: null },
        mdr: { completed: false, assignee: 'Dr. Smith', date: null }
      },
      notes: 'Referred for academic concerns. Parent consent obtained.'
    },
    {
      id: 2,
      firstName: 'James',
      lastName: 'Wilson',
      studentId: 'STU002',
      grade: '7th',
      campus: 'Middle School North',
      consentDate: '2025-05-01',
      ardDate: '2025-06-25',
      status: 'Due Soon',
      primaryLanguage: 'English',
      isLEP: false,
      gender: 'Male',
      parentName: 'Sarah Wilson',
      parentEmail: 'sarah.wilson@email.com',
      parentPhone: '(210) 555-0456',
      fieType: 'Reeval',
      eligibilityPrimary: 'AU',
      eligibilitySecondary: 'SLD',
      services: {
        counseling: false,
        bip: true,
        at: true
      },
      assessments: {
        cognitive: { completed: true, assignee: 'Dr. Brown', date: '2025-05-10' },
        academic: { completed: false, assignee: 'Dr. Brown', date: null },
        emotional: { completed: true, assignee: 'Dr. Martinez', date: '2025-05-08' },
        speechLanguage: { completed: true, assignee: 'Ms. Thompson', date: '2025-05-05' },
        mdr: { completed: false, assignee: 'Dr. Brown', date: null }
      },
      notes: 'Three-year reevaluation. Update ADOS protocol needed.'
    }
  ]);

  // View and filter state
  const [selectedView, setSelectedView] = useState('basic');
  const [searchTerm, setSearchTerm] = useState('');
  const [filterStatus, setFilterStatus] = useState('All');
  const [filterCampus, setFilterCampus] = useState('All');
  const [membershipLevel, setMembershipLevel] = useState('professional');
  const [showSettings, setShowSettings] = useState(false);
  const [showAddForm, setShowAddForm] = useState(false);
  const [sidebarOpen, setSidebarOpen] = useState(false);

  // New student form state
  const [newStudent, setNewStudent] = useState({
    firstName: '',
    lastName: '',
    studentId: '',
    grade: '',
    campus: '',
    consentDate: '',
    ardDate: '',
    primaryLanguage: 'English',
    isLEP: false,
    gender: '',
    parentName: '',
    parentEmail: '',
    parentPhone: '',
    fieType: 'Initial',
    eligibilityPrimary: '',
    notes: ''
  });

  // Calculate days remaining for timeline tracking
  const calculateDaysRemaining = (consentDate) => {
    const consent = new Date(consentDate);
    const today = new Date();
    const schoolDaysElapsed = Math.floor((today - consent) / (1000 * 60 * 60 * 24));
    const remaining = 45 - schoolDaysElapsed;
    return Math.max(0, remaining);
  };

  // Membership tier configurations
  const membershipTiers = {
    basic: {
      name: 'Basic (Free)',
      maxAssessments: 5,
      assessmentTypes: ['cognitive', 'academic', 'emotional', 'speechLanguage', 'mdr'],
      color: 'bg-gray-100 text-gray-800',
      price: 'Free'
    },
    professional: {
      name: 'Professional',
      maxAssessments: 12,
      assessmentTypes: ['cognitive', 'academic', 'emotional', 'speechLanguage', 'mdr', 'ot', 'pt', 'vision', 'hearing', 'adaptiveBehavior', 'at', 'fba'],
      color: 'bg-blue-100 text-blue-800',
      price: '$19/month'
    },
    enterprise: {
      name: 'Enterprise',
      maxAssessments: 18,
      assessmentTypes: ['cognitive', 'academic', 'emotional', 'speechLanguage', 'mdr', 'ot', 'pt', 'vision', 'hearing', 'adaptiveBehavior', 'at', 'fba', 'transition', 'neuropsych', 'autism', 'bilingual', 'executiveFunction', 'sensory', 'traumaInformed'],
      color: 'bg-purple-100 text-purple-800',
      price: '$39/month'
    }
  };

  // Filter students based on search and filters
  const filteredStudents = useMemo(() => {
    return students.filter(student => {
      const matchesSearch = 
        student.firstName.toLowerCase().includes(searchTerm.toLowerCase()) ||
        student.lastName.toLowerCase().includes(searchTerm.toLowerCase()) ||
        student.studentId.toLowerCase().includes(searchTerm.toLowerCase()) ||
        student.campus.toLowerCase().includes(searchTerm.toLowerCase());
      
      const matchesStatus = filterStatus === 'All' || student.status === filterStatus;
      const matchesCampus = filterCampus === 'All' || student.campus === filterCampus;
      
      return matchesSearch && matchesStatus && matchesCampus;
    });
  }, [students, searchTerm, filterStatus, filterCampus]);

  // Get unique campuses for filter dropdown
  const campuses = [...new Set(students.map(s => s.campus))];
  const statusOptions = ['All', 'In Progress', 'Due Soon', 'Overdue', 'Completed'];

  // Statistics calculations
  const stats = {
    total: students.length,
    inProgress: students.filter(s => s.status === 'In Progress').length,
    dueSoon: students.filter(s => s.status === 'Due Soon').length,
    overdue: students.filter(s => s.status === 'Overdue').length,
    completed: students.filter(s => s.status === 'Completed').length
  };

  // Add new student
  const addStudent = () => {
    const student = {
      ...newStudent,
      id: Date.now(),
      status: 'In Progress',
      assessments: {
        cognitive: { completed: false, assignee: '', date: null },
        academic: { completed: false, assignee: '', date: null },
        emotional: { completed: false, assignee: '', date: null },
        speechLanguage: { completed: false, assignee: '', date: null },
        mdr: { completed: false, assignee: '', date: null }
      },
      services: {
        counseling: false,
        bip: false,
        at: false
      }
    };
    
    setStudents([...students, student]);
    setShowAddForm(false);
    setNewStudent({
      firstName: '',
      lastName: '',
      studentId: '',
      grade: '',
      campus: '',
      consentDate: '',
      ardDate: '',
      primaryLanguage: 'English',
      isLEP: false,
      gender: '',
      parentName: '',
      parentEmail: '',
      parentPhone: '',
      fieType: 'Initial',
      eligibilityPrimary: '',
      notes: ''
    });
  };

  // Delete student
  const deleteStudent = (id) => {
    setStudents(students.filter(s => s.id !== id));
  };

  // Get status color
  const getStatusColor = (student) => {
    const daysRemaining = calculateDaysRemaining(student.consentDate);
    if (daysRemaining <= 0) return 'bg-red-100 text-red-800';
    if (daysRemaining <= 10) return 'bg-orange-100 text-orange-800';
    return 'bg-green-100 text-green-800';
  };

  // Assessment icons mapping
  const assessmentIcons = {
    cognitive: Brain,
    academic: BookOpen,
    emotional: Heart,
    speechLanguage: Mic,
    mdr: FileText,
    ot: Hand,
    pt: Activity,
    vision: Eye,
    hearing: Headphones,
    adaptiveBehavior: UserCheck,
    at: Smartphone,
    fba: Target,
    transition: GraduationCap,
    neuropsych: Zap,
    autism: Shield,
    bilingual: Globe,
    executiveFunction: BarChart3,
    sensory: Settings,
    traumaInformed: Users
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white shadow-sm border-b">
        <div className="px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            <div className="flex items-center">
              <button
                onClick={() => setSidebarOpen(!sidebarOpen)}
                className="p-2 rounded-md text-gray-600 hover:text-gray-900 hover:bg-gray-100 md:hidden"
              >
                <Menu className="h-6 w-6" />
              </button>
              <div className="flex items-center ml-2 md:ml-0">
                <GraduationCap className="h-8 w-8 text-blue-600" />
                <h1 className="ml-2 text-xl font-bold text-gray-900">ConnectEd360</h1>
              </div>
            </div>
            
            <div className="flex items-center space-x-4">
              <span className={`px-3 py-1 rounded-full text-sm font-medium ${membershipTiers[membershipLevel].color}`}>
                {membershipTiers[membershipLevel].name}
              </span>
              <button
                onClick={() => setShowSettings(!showSettings)}
                className="p-2 rounded-md text-gray-600 hover:text-gray-900 hover:bg-gray-100"
              >
                <Settings className="h-5 w-5" />
              </button>
            </div>
          </div>
        </div>
      </header>

      <div className="flex">
        {/* Sidebar - Mobile */}
        {sidebarOpen && (
          <div className="fixed inset-0 z-40 md:hidden">
            <div className="fixed inset-0 bg-gray-600 bg-opacity-75" onClick={() => setSidebarOpen(false)} />
            <div className="relative flex-1 flex flex-col max-w-xs w-full bg-white">
              <div className="absolute top-0 right-0 -mr-12 pt-2">
                <button
                  onClick={() => setSidebarOpen(false)}
                  className="ml-1 flex items-center justify-center h-10 w-10 rounded-full focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white"
                >
                  <X className="h-6 w-6 text-white" />
                </button>
              </div>
              <SidebarContent />
            </div>
          </div>
        )}

        {/* Sidebar - Desktop */}
        <div className="hidden md:flex md:w-64 md:flex-col md:fixed md:inset-y-0 md:pt-16">
          <SidebarContent />
        </div>

        {/* Main content */}
        <div className="flex-1 md:pl-64">
          <div className="p-4 sm:p-6 lg:p-8">
            {/* Settings Panel */}
            {showSettings && (
              <div className="mb-6 bg-white rounded-lg shadow p-6">
                <h3 className="text-lg font-medium text-gray-900 mb-4">Settings</h3>
                <div className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Membership Tier
                    </label>
                    <select 
                      value={membershipLevel}
                      onChange={(e) => setMembershipLevel(e.target.value)}
                      className="block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                    >
                      <option value="basic">Basic (Free) - 5 assessments</option>
                      <option value="professional">Professional ($19/mo) - 12 assessments</option>
                      <option value="enterprise">Enterprise ($39/mo) - 18+ assessments</option>
                    </select>
                  </div>
                  <div className="text-sm text-gray-600">
                    <strong>Current Plan:</strong> {membershipTiers[membershipLevel].name} - {membershipTiers[membershipLevel].price}
                    <br />
                    <strong>Assessment Limit:</strong> {membershipTiers[membershipLevel].maxAssessments} types
                  </div>
                </div>
              </div>
            )}

            {/* Stats Dashboard */}
            <div className="grid grid-cols-1 md:grid-cols-5 gap-4 mb-6">
              <StatCard icon={Users} label="Total Students" value={stats.total} color="bg-blue-500" />
              <StatCard icon={Clock} label="In Progress" value={stats.inProgress} color="bg-yellow-500" />
              <StatCard icon={AlertTriangle} label="Due Soon" value={stats.dueSoon} color="bg-orange-500" />
              <StatCard icon={Calendar} label="Overdue" value={stats.overdue} color="bg-red-500" />
              <StatCard icon={CheckCircle} label="Completed" value={stats.completed} color="bg-green-500" />
            </div>

            {/* Controls */}
            <div className="bg-white rounded-lg shadow mb-6 p-4">
              <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4">
                {/* Search and Filters */}
                <div className="flex flex-col sm:flex-row gap-4 flex-1">
                  <div className="relative flex-1 max-w-md">
                    <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
                    <input
                      type="text"
                      placeholder="Search students..."
                      value={searchTerm}
                      onChange={(e) => setSearchTerm(e.target.value)}
                      className="pl-10 pr-4 py-2 w-full border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
                    />
                  </div>
                  
                  <select 
                    value={filterStatus}
                    onChange={(e) => setFilterStatus(e.target.value)}
                    className="px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
                  >
                    {statusOptions.map(status => (
                      <option key={status} value={status}>{status}</option>
                    ))}
                  </select>
                  
                  <select 
                    value={filterCampus}
                    onChange={(e) => setFilterCampus(e.target.value)}
                    className="px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
                  >
                    <option value="All">All Campuses</option>
                    {campuses.map(campus => (
                      <option key={campus} value={campus}>{campus}</option>
                    ))}
                  </select>
                </div>

                {/* View Toggle and Add Button */}
                <div className="flex items-center gap-4">
                  <div className="flex rounded-md shadow-sm">
                    <ViewToggleButton 
                      view="basic" 
                      currentView={selectedView} 
                      onClick={() => setSelectedView('basic')}
                      label="Basic"
                    />
                    <ViewToggleButton 
                      view="enhanced" 
                      currentView={selectedView} 
                      onClick={() => setSelectedView('enhanced')}
                      label="Enhanced"
                    />
                    <ViewToggleButton 
                      view="detailed" 
                      currentView={selectedView} 
                      onClick={() => setSelectedView('detailed')}
                      label="Detailed"
                    />
                  </div>
                  
                  <button
                    onClick={() => setShowAddForm(true)}
                    className="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 flex items-center gap-2"
                  >
                    <Plus className="h-4 w-4" />
                    Add Student
                  </button>
                </div>
              </div>
            </div>

            {/* Student Views */}
            {selectedView === 'basic' && <BasicTableView students={filteredStudents} onDelete={deleteStudent} calculateDaysRemaining={calculateDaysRemaining} getStatusColor={getStatusColor} />}
            {selectedView === 'enhanced' && <EnhancedCardView students={filteredStudents} onDelete={deleteStudent} calculateDaysRemaining={calculateDaysRemaining} getStatusColor={getStatusColor} assessmentIcons={assessmentIcons} membershipLevel={membershipLevel} membershipTiers={membershipTiers} />}
            {selectedView === 'detailed' && <DetailedView students={filteredStudents} onDelete={deleteStudent} calculateDaysRemaining={calculateDaysRemaining} getStatusColor={getStatusColor} assessmentIcons={assessmentIcons} membershipLevel={membershipLevel} membershipTiers={membershipTiers} />}
          </div>
        </div>
      </div>

      {/* Add Student Modal */}
      {showAddForm && (
        <AddStudentModal 
          newStudent={newStudent}
          setNewStudent={setNewStudent}
          onAdd={addStudent}
          onCancel={() => setShowAddForm(false)}
        />
      )}
    </div>
  );

  function SidebarContent() {
    return (
      <div className="flex flex-col bg-white border-r border-gray-200 pt-5 pb-4 overflow-y-auto">
        <div className="flex items-center flex-shrink-0 px-4">
          <FileText className="h-6 w-6 text-blue-600" />
          <span className="ml-2 text-lg font-medium text-gray-900">FIE Tracker</span>
        </div>
        <nav className="mt-5 flex-1 px-2 space-y-1">
          <a href="#" className="bg-blue-100 text-blue-700 group flex items-center px-2 py-2 text-sm font-medium rounded-md">
            <Users className="text-blue-500 mr-3 h-5 w-5" />
            Student Tracker
          </a>
          <a href="#" className="text-gray-600 hover:bg-gray-50 hover:text-gray-900 group flex items-center px-2 py-2 text-sm font-medium rounded-md">
            <BarChart3 className="text-gray-400 mr-3 h-5 w-5" />
            Reports
          </a>
          <a href="#" className="text-gray-600 hover:bg-gray-50 hover:text-gray-900 group flex items-center px-2 py-2 text-sm font-medium rounded-md">
            <FileText className="text-gray-400 mr-3 h-5 w-5" />
            Templates
          </a>
        </nav>
      </div>
    );
  }
};

// Component definitions would continue...
function StatCard({ icon: Icon, label, value, color }) {
  return (
    <div className="bg-white overflow-hidden shadow rounded-lg">
      <div className="p-5">
        <div className="flex items-center">
          <div className="flex-shrink-0">
            <div className={`p-2 rounded-md ${color}`}>
              <Icon className="h-6 w-6 text-white" />
            </div>
          </div>
          <div className="ml-5 w-0 flex-1">
            <dl>
              <dt className="text-sm font-medium text-gray-500 truncate">{label}</dt>
              <dd className="text-lg font-medium text-gray-900">{value}</dd>
            </dl>
          </div>
        </div>
      </div>
    </div>
  );
}

function ViewToggleButton({ view, currentView, onClick, label }) {
  const isActive = view === currentView;
  return (
    <button
      onClick={onClick}
      className={`px-4 py-2 text-sm font-medium border ${
        isActive 
          ? 'bg-blue-600 text-white border-blue-600' 
          : 'bg-white text-gray-700 border-gray-300 hover:bg-gray-50'
      } ${view === 'basic' ? 'rounded-l-md' : view === 'detailed' ? 'rounded-r-md' : ''}`}
    >
      {label}
    </button>
  );
}

function BasicTableView({ students, onDelete, calculateDaysRemaining, getStatusColor }) {
  return (
    <div className="bg-white shadow overflow-hidden sm:rounded-md">
      <div className="overflow-x-auto">
        <table className="min-w-full divide-y divide-gray-200">
          <thead className="bg-gray-50">
            <tr>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Student</th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Campus</th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Days Remaining</th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ARD Date</th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {students.map((student) => (
              <tr key={student.id} className="hover:bg-gray-50">
                <td className="px-6 py-4 whitespace-nowrap">
                  <div>
                    <div className="text-sm font-medium text-gray-900">
                      {student.firstName} {student.lastName}
                    </div>
                    <div className="text-sm text-gray-500">{student.studentId}</div>
                  </div>
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                  {student.campus}
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${getStatusColor(student)}`}>
                    {student.status}
                  </span>
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                  {calculateDaysRemaining(student.consentDate)} days
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                  {student.ardDate}
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                  <button
                    onClick={() => onDelete(student.id)}
                    className="text-red-600 hover:text-red-900"
                  >
                    <Trash2 className="h-4 w-4" />
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
}

function EnhancedCardView({ students, onDelete, calculateDaysRemaining, getStatusColor, assessmentIcons, membershipLevel, membershipTiers }) {
  return (
    <div className="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6">
      {students.map((student) => (
        <div key={student.id} className="bg-white rounded-lg shadow-md overflow-hidden">
          <div className="p-6">
            <div className="flex justify-between items-start mb-4">
              <div>
                <h3 className="text-lg font-semibold text-gray-900">
                  {student.firstName} {student.lastName}
                </h3>
                <p className="text-sm text-gray-600">{student.studentId} • {student.grade} • {student.campus}</p>
              </div>
              <button
                onClick={() => onDelete(student.id)}
                className="text-red-600 hover:text-red-900"
              >
                <Trash2 className="h-4 w-4" />
              </button>
            </div>
            
            <div className="mb-4">
              <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${getStatusColor(student)}`}>
                {student.status}
              </span>
              <span className="ml-2 text-sm text-gray-600">
                {calculateDaysRemaining(student.consentDate)} days remaining
              </span>
            </div>

            <div className="space-y-2 text-sm">
              <div className="flex justify-between">
                <span className="text-gray-600">FIE Type:</span>
                <span className="font-medium">{student.fieType}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-600">Primary Language:</span>
                <span className="font-medium">{student.primaryLanguage}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-600">ARD Date:</span>
                <span className="font-medium">{student.ardDate}</span>
              </div>
            </div>

            <div className="mt-4">
              <h4 className="text-sm font-medium text-gray-900 mb-2">Assessment Progress</h4>
              <div className="grid grid-cols-5 gap-2">
                {Object.entries(student.assessments).map(([key, assessment]) => {
                  const Icon = assessmentIcons[key];
                  return (
                    <div
                      key={key}
                      className={`p-2 rounded-md text-center ${
                        assessment.completed ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-600'
                      }`}
                      title={key.charAt(0).toUpperCase() + key.slice(1)}
                    >
                      <Icon className="h-4 w-4 mx-auto" />
                    </div>
                  );
                })}
              </div>
            </div>
          </div>
        </div>
      ))}
    </div>
  );
}

function DetailedView({ students, onDelete, calculateDaysRemaining, getStatusColor, assessmentIcons, membershipLevel, membershipTiers }) {
  return (
    <div className="space-y-6">
      {students.map((student) => (
        <div key={student.id} className="bg-white rounded-lg shadow-lg overflow-hidden">
          <div className="p-6">
            <div className="flex justify-between items-start mb-6">
              <div>
                <h3 className="text-xl font-bold text-gray-900">
                  {student.firstName} {student.lastName}
                </h3>
                <p className="text-gray-600">{student.studentId} • Grade {student.grade} • {student.campus}</p>
              </div>
              <button
                onClick={() => onDelete(student.id)}
                className="text-red-600 hover:text-red-900 p-2 rounded-md hover:bg-red-50"
              >
                <Trash2 className="h-5 w-5" />
              </button>
            </div>

            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
              {/* Student Information */}
              <div className="space-y-4">
                <h4 className="font-semibold text-gray-900">Student Information</h4>
                <div className="space-y-2 text-sm">
                  <div className="flex justify-between">
                    <span className="text-gray-600">Gender:</span>
                    <span className="font-medium">{student.gender}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Primary Language:</span>
                    <span className="font-medium">{student.primaryLanguage}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">LEP Status:</span>
                    <span className="font-medium">{student.isLEP ? 'Yes' : 'No'}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">FIE Type:</span>
                    <span className="font-medium">{student.fieType}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Primary Eligibility:</span>
                    <span className="font-medium">{student.eligibilityPrimary || 'TBD'}</span>
                  </div>
                </div>

                <div className="pt-4 border-t">
                  <h5 className="font-medium text-gray-900 mb-2">Parent/Guardian</h5>
                  <div className="space-y-1 text-sm">
                    <p className="font-medium">{student.parentName}</p>
                    <p className="text-gray-600">{student.parentEmail}</p>
                    <p className="text-gray-600">{student.parentPhone}</p>
                  </div>
                </div>
              </div>

              {/* Timeline & Status */}
              <div className="space-y-4">
                <h4 className="font-semibold text-gray-900">Timeline & Status</h4>
                <div className="space-y-2 text-sm">
                  <div className="flex justify-between">
                    <span className="text-gray-600">Consent Date:</span>
                    <span className="font-medium">{student.consentDate}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">ARD Date:</span>
                    <span className="font-medium">{student.ardDate}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Days Remaining:</span>
                    <span className="font-bold text-lg">{calculateDaysRemaining(student.consentDate)}</span>
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="text-gray-600">Status:</span>
                    <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${getStatusColor(student)}`}>
                      {student.status}
                    </span>
                  </div>
                </div>

                <div className="pt-4 border-t">
                  <h5 className="font-medium text-gray-900 mb-2">Services</h5>
                  <div className="space-y-1 text-sm">
                    <div className="flex justify-between">
                      <span className="text-gray-600">Counseling:</span>
                      <span className={student.services.counseling ? 'text-green-600' : 'text-gray-400'}>
                        {student.services.counseling ? 'Yes' : 'No'}
                      </span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-600">BIP:</span>
                      <span className={student.services.bip ? 'text-green-600' : 'text-gray-400'}>
                        {student.services.bip ? 'Yes' : 'No'}
                      </span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-600">AT:</span>
                      <span className={student.services.at ? 'text-green-600' : 'text-gray-400'}>
                        {student.services.at ? 'Yes' : 'No'}
                      </span>
                    </div>
                  </div>
                </div>
              </div>

              {/* Assessments */}
              <div className="space-y-4">
                <h4 className="font-semibold text-gray-900">Assessment Progress</h4>
                <div className="space-y-3">
                  {Object.entries(student.assessments).map(([key, assessment]) => {
                    const Icon = assessmentIcons[key];
                    return (
                      <div key={key} className="flex items-center justify-between p-3 border rounded-md">
                        <div className="flex items-center">
                          <Icon className="h-5 w-5 text-gray-600 mr-3" />
                          <div>
                            <p className="font-medium text-sm capitalize">
                              {key.replace(/([A-Z])/g, ' $1').toLowerCase()}
                            </p>
                            {assessment.assignee && (
                              <p className="text-xs text-gray-500">{assessment.assignee}</p>
                            )}
                          </div>
                        </div>
                        <div className="text-right">
                          <div className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                            assessment.completed ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-600'
                          }`}>
                            {assessment.completed ? 'Complete' : 'Pending'}
                          </div>
                          {assessment.date && (
                            <p className="text-xs text-gray-500 mt-1">{assessment.date}</p>
                          )}
                        </div>
                      </div>
                    );
                  })}
                </div>
              </div>
            </div>

            {/* Notes */}
            {student.notes && (
              <div className="mt-6 pt-6 border-t">
                <h4 className="font-semibold text-gray-900 mb-2">Notes</h4>
                <p className="text-sm text-gray-700 bg-gray-50 p-3 rounded-md">{student.notes}</p>
              </div>
            )}
          </div>
        </div>
      ))}
    </div>
  );
}

function AddStudentModal({ newStudent, setNewStudent, onAdd, onCancel }) {
  return (
    <div className="fixed inset-0 z-50 overflow-y-auto">
      <div className="flex items-center justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
        <div className="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" onClick={onCancel} />
        
        <div className="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-2xl sm:w-full">
          <div className="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
            <div className="sm:flex sm:items-start">
              <div className="w-full">
                <h3 className="text-lg leading-6 font-medium text-gray-900 mb-4">
                  Add New Student
                </h3>
                
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      First Name *
                    </label>
                    <input
                      type="text"
                      value={newStudent.firstName}
                      onChange={(e) => setNewStudent({...newStudent, firstName: e.target.value})}
                      className="w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-blue-500 focus:border-blue-500"
                      required
                    />
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Last Name *
                    </label>
                    <input
                      type="text"
                      value={newStudent.lastName}
                      onChange={(e) => setNewStudent({...newStudent, lastName: e.target.value})}
                      className="w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-blue-500 focus:border-blue-500"
                      required
                    />
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Student ID *
                    </label>
                    <input
                      type="text"
                      value={newStudent.studentId}
                      onChange={(e) => setNewStudent({...newStudent, studentId: e.target.value})}
                      className="w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-blue-500 focus:border-blue-500"
                      required
                    />
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Grade *
                    </label>
                    <select
                      value={newStudent.grade}
                      onChange={(e) => setNewStudent({...newStudent, grade: e.target.value})}
                      className="w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-blue-500 focus:border-blue-500"
                      required
                    >
                      <option value="">Select Grade</option>
                      <option value="PK">Pre-K</option>
                      <option value="K">Kindergarten</option>
                      {[1,2,3,4,5,6,7,8,9,10,11,12].map(grade => (
                        <option key={grade} value={`${grade}th`}>{grade}th Grade</option>
                      ))}
                    </select>
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Campus *
                    </label>
                    <input
                      type="text"
                      value={newStudent.campus}
                      onChange={(e) => setNewStudent({...newStudent, campus: e.target.value})}
                      className="w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-blue-500 focus:border-blue-500"
                      required
                    />
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Gender
                    </label>
                    <select
                      value={newStudent.gender}
                      onChange={(e) => setNewStudent({...newStudent, gender: e.target.value})}
                      className="w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-blue-500 focus:border-blue-500"
                    >
                      <option value="">Select Gender</option>
                      <option value="Male">Male</option>
                      <option value="Female">Female</option>
                      <option value="Non-binary">Non-binary</option>
                      <option value="Prefer not to say">Prefer not to say</option>
                    </select>
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Consent Date *
                    </label>
                    <input
                      type="date"
                      value={newStudent.consentDate}
                      onChange={(e) => setNewStudent({...newStudent, consentDate: e.target.value})}
                      className="w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-blue-500 focus:border-blue-500"
                      required
                    />
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      ARD Date
                    </label>
                    <input
                      type="date"
                      value={newStudent.ardDate}
                      onChange={(e) => setNewStudent({...newStudent, ardDate: e.target.value})}
                      className="w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-blue-500 focus:border-blue-500"
                    />
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Primary Language
                    </label>
                    <select
                      value={newStudent.primaryLanguage}
                      onChange={(e) => setNewStudent({...newStudent, primaryLanguage: e.target.value})}
                      className="w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-blue-500 focus:border-blue-500"
                    >
                      <option value="English">English</option>
                      <option value="Spanish">Spanish</option>
                      <option value="Other">Other</option>
                    </select>
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      FIE Type
                    </label>
                    <select
                      value={newStudent.fieType}
                      onChange={(e) => setNewStudent({...newStudent, fieType: e.target.value})}
                      className="w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-blue-500 focus:border-blue-500"
                    >
                      <option value="Initial">Initial</option>
                      <option value="Reeval">Reevaluation</option>
                      <option value="REED">REED</option>
                    </select>
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Parent/Guardian Name
                    </label>
                    <input
                      type="text"
                      value={newStudent.parentName}
                      onChange={(e) => setNewStudent({...newStudent, parentName: e.target.value})}
                      className="w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-blue-500 focus:border-blue-500"
                    />
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Parent Email
                    </label>
                    <input
                      type="email"
                      value={newStudent.parentEmail}
                      onChange={(e) => setNewStudent({...newStudent, parentEmail: e.target.value})}
                      className="w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-blue-500 focus:border-blue-500"
                    />
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Parent Phone
                    </label>
                    <input
                      type="tel"
                      value={newStudent.parentPhone}
                      onChange={(e) => setNewStudent({...newStudent, parentPhone: e.target.value})}
                      className="w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-blue-500 focus:border-blue-500"
                    />
                  </div>
                  
                  <div className="md:col-span-2">
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Notes
                    </label>
                    <textarea
                      value={newStudent.notes}
                      onChange={(e) => setNewStudent({...newStudent, notes: e.target.value})}
                      rows={3}
                      className="w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-blue-500 focus:border-blue-500"
                      placeholder="Enter any additional notes..."
                    />
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          <div className="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
            <button
              type="button"
              onClick={onAdd}
              disabled={!newStudent.firstName || !newStudent.lastName || !newStudent.studentId || !newStudent.grade || !newStudent.campus || !newStudent.consentDate}
              className="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-blue-600 text-base font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 sm:ml-3 sm:w-auto sm:text-sm disabled:opacity-50 disabled:cursor-not-allowed"
            >
              Add Student
            </button>
            <button
              type="button"
              onClick={onCancel}
              className="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm"
            >
              Cancel
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}

export default ConnectEd360;
